# 项目上下文信息

**项目名称**: pubmed_literature_agent
**Agent名称**: pubmed_search_agent  
**开发阶段**: agent_code_developer
**生成时间**: 2025-09-18 05:59:00 UTC

---

{
  "agent_code_development": {
    "development_overview": {
      "project_name": "pubmed_literature_agent",
      "version": "1.0",
      "date": "2025-09-18",
      "development_scope": "Development of a PubMed Literature Search Agent that retrieves, analyzes, and presents relevant medical literature from PubMed based on user queries",
      "design_principles": [
        "Single responsibility - Each component has a clear and focused purpose",
        "Modularity - Components can be developed and tested independently",
        "Extensibility - Design allows for future enhancements and additional features",
        "User-centric - Focus on providing valuable, relevant information efficiently",
        "Error resilience - Graceful handling of API limitations and failures"
      ],
      "key_decisions": [
        "Using create_agent_from_prompt_template for agent instantiation",
        "Selecting Claude Opus model for advanced medical comprehension",
        "Implementing a flexible search_pubmed_literature function with comprehensive parameters",
        "Creating a command-line interface for easy testing and usage",
        "Structuring the agent to leverage the specialized PubMed API tools"
      ]
    },
    "agent_implementation": {
      "agent_name": "pubmed_search_agent",
      "file_path": "agents/generated_agents/pubmed_literature_agent/pubmed_search_agent.py",
      "main_class": "N/A (functional implementation)",
      "entry_point": "search_pubmed_literature",
      "dependencies": [
        "utils.agent_factory",
        "strands.telemetry",
        "os",
        "json",
        "logging",
        "typing"
      ],
      "imports": [
        "from utils.agent_factory import create_agent_from_prompt_template",
        "from strands.telemetry import StrandsTelemetry",
        "from typing import List, Dict, Any, Optional"
      ]
    },
    "core_functions": [
      {
        "function_name": "search_pubmed_literature",
        "purpose": "Search PubMed for medical literature based on a query and parameters",
        "parameters": [
          {
            "name": "query",
            "type": "str",
            "description": "The natural language query or research question",
            "required": true
          },
          {
            "name": "max_results",
            "type": "int",
            "description": "Maximum number of results to return",
            "required": false
          },
          {
            "name": "sort_by",
            "type": "str",
            "description": "Sort order for results (relevance, pub_date, first_author, journal)",
            "required": false
          },
          {
            "name": "date_range",
            "type": "Optional[Dict[str, str]]",
            "description": "Date range for filtering results",
            "required": false
          },
          {
            "name": "article_types",
            "type": "Optional[List[str]]",
            "description": "Specific article types to filter by",
            "required": false
          }
        ],
        "return_type": "str",
        "return_description": "Formatted response with search results, summaries, and analysis",
        "implementation_notes": [
          "Constructs input text with query and parameters",
          "Formats additional parameters if provided",
          "Processes the query through the agent",
          "Includes error handling with logging"
        ]
      }
    ],
    "tool_integration": {
      "custom_tools": [
        "pubmed_search",
        "pubmed_fetch_abstract",
        "pubmed_advanced_search",
        "pubmed_fetch_citations",
        "pubmed_fetch_related",
        "pubmed_get_trending_articles",
        "pubmed_rank_articles",
        "pubmed_get_author_publications"
      ],
      "system_tools": [
        "http_request",
        "current_time",
        "calculator",
        "think"
      ],
      "strands_tools": [
        "strands_tools/http_request",
        "strands_tools/current_time",
        "strands_tools/calculator",
        "strands_tools/think"
      ],
      "integration_notes": [
        "Tools are integrated through the prompt template",
        "The agent automatically selects appropriate tools based on the query",
        "All PubMed API tools are implemented in pubmed_api_tool.py",
        "Tool paths are specified in the agent's prompt template metadata"
      ]
    },
    "configuration": {
      "environment_variables": [
        "BYPASS_TOOL_CONSENT",
        "OTEL_EXPORTER_OTLP_ENDPOINT",
        "PUBMED_API_KEY (optional)"
      ],
      "model_configuration": {
        "model_name": "us.anthropic.claude-opus-4-20250514-v1:0",
        "max_tokens": 60000,
        "temperature": 0.3,
        "top_p": 0.8
      },
      "streaming_config": {
        "enabled": true,
        "chunk_size": 1024
      }
    },
    "error_handling": {
      "exception_types": [
        "General exceptions in search_pubmed_literature function",
        "API rate limit exceptions (handled by tools)",
        "Network connectivity issues (handled by tools)",
        "Parsing errors (handled by tools)"
      ],
      "error_responses": [
        "Logged errors with descriptive messages",
        "User-friendly error messages returned from function",
        "Structured error responses from tools in JSON format"
      ],
      "recovery_strategies": [
        "Exponential backoff for API rate limits (implemented in tools)",
        "Alternative search suggestions for zero results (implemented in agent)",
        "Graceful degradation when full functionality is unavailable"
      ]
    },
    "testing": {
      "test_cases": [
        "Basic medical query (e.g., 'What are the latest treatments for type 2 diabetes?')",
        "Specific research methodology query (e.g., 'Find randomized controlled trials on COVID-19 vaccines published in the last year')",
        "Ambiguous query (e.g., 'Tell me about hypertension')",
        "Zero results query (e.g., 'Research on quantum computing applications in dermatology')",
        "Author-specific query (e.g., 'Recent papers by Anthony Fauci on infectious diseases')"
      ],
      "test_scenarios": [
        "Search with default parameters",
        "Search with custom max_results and sort_by",
        "Search with date range filtering",
        "Search with article type filtering",
        "Search with multiple parameters combined"
      ],
      "validation_criteria": [
        "Correct retrieval of relevant articles",
        "Accurate summaries and key points",
        "Appropriate relevance ranking",
        "Proper error handling and feedback",
        "Response time within acceptable limits"
      ]
    },
    "deployment": {
      "deployment_requirements": [
        "Python 3.13+",
        "Strands SDK",
        "Access to AWS Bedrock",
        "Network connectivity to PubMed/NCBI E-utilities API",
        "Optional: PUBMED_API_KEY environment variable for higher rate limits"
      ],
      "runtime_dependencies": [
        "utils.agent_factory",
        "strands.telemetry",
        "pubmed_api_tool custom tools"
      ],
      "performance_considerations": [
        "PubMed API rate limits (3 requests/second without API key, 10 requests/second with API key)",
        "Response time depends on number of articles processed",
        "Caching implemented in tools to reduce API calls for frequently accessed articles",
        "Token usage optimized for comprehensive analysis within limits"
      ]
    },
    "development_notes": "The PubMed Literature Search Agent was developed as a specialized research tool that leverages the PubMed/NCBI E-utilities API through custom tools. The implementation follows a functional approach with a main search_pubmed_literature function that processes queries and parameters. The agent is instantiated using create_agent_from_prompt_template to leverage the comprehensive prompt engineering work that defines the agent's capabilities, workflow, and output format. Claude Opus was selected as the model due to its advanced capabilities in understanding medical terminology and generating accurate summaries of scientific content. The command-line interface provides flexibility for testing and usage in various scenarios. The agent's design prioritizes providing relevant, well-structured results with appropriate context and analysis, while respecting PubMed API limitations and properly attributing all information to its sources."
  }
}