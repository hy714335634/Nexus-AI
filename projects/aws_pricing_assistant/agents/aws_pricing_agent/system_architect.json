# 项目上下文信息

**项目名称**: aws_pricing_assistant
**Agent名称**: aws_pricing_agent  
**开发阶段**: system_architect
**生成时间**: 2025-09-11 06:01:43 UTC

---

{
  "system_design": {
    "design_overview": {
      "project_name": "aws_pricing_assistant",
      "version": "1.0",
      "date": "2025-09-11",
      "design_scope": "设计一个AWS产品报价助手，能够根据用户提供的自然语言描述的配置需求或其他云平台账单，分析并推荐合理的AWS配置方案，并提供准确的价格信息。",
      "design_principles": [
        "准确性：提供准确的AWS产品价格信息",
        "智能推断：能够从不完整的需求描述中推测合理配置",
        "专业性：生成符合销售思维的专业报价方案",
        "实时性：通过AWS API获取最新价格数据",
        "全面性：支持多种AWS产品和全球区域报价",
        "用户友好：提供清晰、结构化的中文报价输出"
      ],
      "key_decisions": [
        "采用单Agent架构，集中处理所有报价相关功能",
        "使用AWS Pricing API获取实时价格数据",
        "实现智能配置推荐算法，根据不完整需求进行合理推测",
        "设计专业的销售报价方案生成模块",
        "使用API集成专家模板作为基础架构"
      ],
      "workflow_type": "single_agent",
      "recommended_templates": ["api_integration_agent"]
    },
    "architecture": {
      "system_context": "AWS产品报价助手是一个专业的云计算配置推荐与报价系统，用于帮助销售人员和技术顾问快速生成准确的AWS产品报价。系统接收用户的自然语言需求描述，分析并推荐合理的AWS配置方案，通过AWS API获取实时价格数据，最终生成专业的销售报价方案。",
      "agent_topology": "单Agent架构，由一个核心Agent负责所有功能，包括需求解析、配置推荐、价格查询和报价生成。",
      "interaction_model": "用户通过自然语言与Agent交互，Agent解析需求，调用AWS API获取价格数据，生成配置推荐和报价方案，最终以结构化的中文报价文档响应用户。",
      "technology_stack": {
        "sdk": "Strands SDK",
        "runtime": "Local",
        "integrations": [
          "AWS Pricing API",
          "AWS SDK for Python (boto3)",
          "AWS Bedrock for AI推理"
        ]
      }
    },
    "agents": [
      {
        "name": "aws_pricing_agent",
        "purpose": "分析用户需求，推荐AWS配置方案，提供准确价格信息，生成专业销售报价方案",
        "responsibilities": [
          "解析用户的自然语言需求描述",
          "推荐合理的AWS配置方案",
          "调用AWS API获取实时价格数据",
          "计算不同付费模式下的价格（按需/预留实例）",
          "生成专业的销售报价方案",
          "处理不完整或模糊的需求描述",
          "支持全球区域（包括中国区）的报价"
        ],
        "interfaces": {
          "inputs": [
            "用户的自然语言需求描述",
            "其他云平台账单或IDC配置清单",
            "可选的AWS区域指定",
            "可选的付费类型指定（按需/预留实例）"
          ],
          "outputs": [
            "AWS配置推荐方案",
            "详细的价格计算明细",
            "结构化的销售报价方案（中文）",
            "可选的配置优化建议"
          ]
        },
        "dependencies": [
          "AWS Pricing API",
          "AWS SDK for Python (boto3)",
          "AWS Bedrock AI服务"
        ],
        "implementation_notes": [
          "基于API集成专家模板实现",
          "需要扩展系统提示词，添加AWS产品知识和价格计算逻辑",
          "实现配置推荐算法，能够从不完整需求中推测合理配置",
          "设计专业的销售报价方案输出格式",
          "实现错误处理机制，处理API不可用等异常情况",
          "优化性能，确保在10秒内完成价格查询和报价生成"
        ],
        "recommended_template": "api_integration_agent"
      }
    ],
    "data_models": [
      {
        "name": "UserRequest",
        "schema": "包含用户需求描述、目标AWS区域、付费类型偏好等字段的JSON对象",
        "validation_rules": [
          "需求描述不能为空",
          "区域必须是有效的AWS区域代码",
          "付费类型必须是有效的选项（按需/预留实例）"
        ],
        "relationships": ["输入到ConfigurationRecommendation"]
      },
      {
        "name": "ConfigurationRecommendation",
        "schema": "包含推荐的AWS资源配置、实例类型、存储类型等字段的JSON对象",
        "validation_rules": [
          "推荐的实例类型必须是有效的AWS实例类型",
          "存储配置必须符合AWS存储服务规范",
          "生产环境不应推荐t系列实例（除非用户指定）"
        ],
        "relationships": ["输入到PricingCalculation"]
      },
      {
        "name": "PricingCalculation",
        "schema": "包含各项资源的单价、数量、小计和总计的JSON对象",
        "validation_rules": [
          "价格必须是非负数",
          "数量必须是正整数",
          "小计和总计必须正确计算"
        ],
        "relationships": ["输入到SalesProposal"]
      },
      {
        "name": "SalesProposal",
        "schema": "包含配置方案、价格明细、优化建议等字段的结构化报价方案",
        "validation_rules": [
          "必须包含所有请求的资源配置",
          "必须包含完整的价格计算",
          "必须使用中文输出"
        ],
        "relationships": ["输出到用户"]
      }
    ],
    "interaction_flows": [
      {
        "name": "基本报价流程",
        "description": "处理用户的基本报价请求，生成AWS配置推荐和价格报价",
        "steps": [
          {
            "step": "接收用户输入",
            "agent": "aws_pricing_agent",
            "action": "解析用户的自然语言需求描述",
            "data": "UserRequest"
          },
          {
            "step": "需求分析",
            "agent": "aws_pricing_agent",
            "action": "分析需求，提取关键配置参数",
            "data": "解析后的需求参数"
          },
          {
            "step": "配置推荐",
            "agent": "aws_pricing_agent",
            "action": "根据需求参数推荐合适的AWS配置",
            "data": "ConfigurationRecommendation"
          },
          {
            "step": "价格查询",
            "agent": "aws_pricing_agent",
            "action": "调用AWS Pricing API获取实时价格数据",
            "data": "原始价格数据"
          },
          {
            "step": "价格计算",
            "agent": "aws_pricing_agent",
            "action": "计算各项资源的价格和总成本",
            "data": "PricingCalculation"
          },
          {
            "step": "报价生成",
            "agent": "aws_pricing_agent",
            "action": "生成专业的销售报价方案",
            "data": "SalesProposal"
          },
          {
            "step": "响应用户",
            "agent": "aws_pricing_agent",
            "action": "返回结构化的中文报价文档",
            "data": "格式化的报价方案"
          }
        ]
      },
      {
        "name": "不完整需求处理流程",
        "description": "处理用户提供的不完整或模糊需求描述",
        "steps": [
          {
            "step": "接收用户输入",
            "agent": "aws_pricing_agent",
            "action": "解析用户的不完整需求描述",
            "data": "UserRequest"
          },
          {
            "step": "需求分析",
            "agent": "aws_pricing_agent",
            "action": "识别需求中的缺失或模糊信息",
            "data": "需求完整性评估"
          },
          {
            "step": "智能推测",
            "agent": "aws_pricing_agent",
            "action": "根据常见配置和最佳实践推测合理配置",
            "data": "推测的完整需求"
          },
          {
            "step": "配置推荐",
            "agent": "aws_pricing_agent",
            "action": "根据推测的需求推荐AWS配置",
            "data": "ConfigurationRecommendation"
          },
          {
            "step": "价格查询和计算",
            "agent": "aws_pricing_agent",
            "action": "获取价格数据并计算成本",
            "data": "PricingCalculation"
          },
          {
            "step": "报价生成",
            "agent": "aws_pricing_agent",
            "action": "生成报价方案，并明确标注推测的部分",
            "data": "SalesProposal（含推测说明）"
          },
          {
            "step": "响应用户",
            "agent": "aws_pricing_agent",
            "action": "返回报价文档，并请求确认推测的配置",
            "data": "格式化的报价方案和确认请求"
          }
        ]
      },
      {
        "name": "竞品迁移评估流程",
        "description": "分析其他云平台账单或IDC配置清单，推荐等效AWS配置",
        "steps": [
          {
            "step": "接收用户输入",
            "agent": "aws_pricing_agent",
            "action": "解析用户提供的其他云平台账单或IDC配置清单",
            "data": "竞品配置信息"
          },
          {
            "step": "配置映射",
            "agent": "aws_pricing_agent",
            "action": "将竞品配置映射到等效的AWS配置",
            "data": "配置映射结果"
          },
          {
            "step": "配置优化",
            "agent": "aws_pricing_agent",
            "action": "根据AWS最佳实践优化配置方案",
            "data": "优化后的ConfigurationRecommendation"
          },
          {
            "step": "价格查询和计算",
            "agent": "aws_pricing_agent",
            "action": "获取价格数据并计算成本",
            "data": "PricingCalculation"
          },
          {
            "step": "报价生成",
            "agent": "aws_pricing_agent",
            "action": "生成迁移报价方案，包含配置对比和优势分析",
            "data": "迁移SalesProposal"
          },
          {
            "step": "响应用户",
            "agent": "aws_pricing_agent",
            "action": "返回迁移报价文档，突出AWS的成本优势和性能优势",
            "data": "格式化的迁移报价方案"
          }
        ]
      }
    ],
    "security_considerations": [
      "不存储用户敏感信息",
      "使用安全的API调用方式访问AWS价格数据",
      "避免在日志中记录敏感配置信息",
      "确保AWS API密钥安全存储和使用",
      "实现适当的访问控制机制"
    ],
    "error_handling": [
      "当AWS API不可用时，提供明确的错误信息",
      "对于无法获取价格的资源，在报价中明确注明",
      "处理无效的用户输入，提供友好的错误提示",
      "实现重试机制，处理临时的API故障",
      "记录错误日志，便于问题诊断和修复"
    ],
    "performance_considerations": [
      "优化API调用，减少请求次数",
      "实现缓存机制，缓存常用价格数据",
      "并行处理多个资源的价格查询",
      "优化配置推荐算法，提高响应速度",
      "确保在10秒内完成价格查询和报价生成"
    ],
    "monitoring_strategy": [
      "记录API调用成功率和响应时间",
      "监控配置推荐的准确性和用户满意度",
      "跟踪报价生成的性能指标",
      "实现用户反馈机制，收集改进建议",
      "定期审查错误日志，识别和解决常见问题"
    ]
  },
  "design_rationale": "本设计采用单Agent架构，主要基于以下考虑：1）功能虽然复杂但围绕AWS产品报价这一核心任务，不需要多个Agent协作；2）单Agent架构简化了数据流和交互模型，提高了系统响应速度；3）便于集中管理AWS API调用和价格计算逻辑。选择API集成专家模板作为基础，是因为该模板专门设计用于与外部API服务集成，完全符合需要调用AWS价格API的核心需求。它提供了完整的API调用、认证管理、数据处理和格式转换功能，这些都是构建AWS产品报价助手所必需的。系统设计重点关注了准确性、智能推断、专业性、实时性、全面性和用户友好性这几个核心原则，以确保能够满足用户对AWS产品报价的所有需求。在实现上，需要扩展系统提示词，添加AWS产品知识和价格计算逻辑；实现配置推荐算法，能够从不完整需求中推测合理配置；设计专业的销售报价方案输出格式。此外，还需要特别关注错误处理、性能优化和监控策略，以确保系统的可靠性和高效性。"
}