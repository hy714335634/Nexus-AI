{
  "tools_development": {
    "tool_name": "tv_show_api",
    "description": "电视节目搜索API工具，用于查询电视节目信息",
    "version": "1.0.0",
    "author": "Agent Developer Manager",
    "date": "2025-09-24",
    "functionality": [
      "通过节目名称搜索电视节目",
      "通过节目类型/类别搜索电视节目",
      "获取电视节目详细信息",
      "获取可用的节目类型列表",
      "管理API缓存"
    ],
    "interface": {
      "main_function": "tv_show_api",
      "parameters": {
        "action": {
          "type": "string",
          "description": "操作类型，可选值：search_by_name, search_by_type, get_show_details, get_available_types, clear_cache",
          "required": true
        },
        "additional_params": {
          "type": "dict",
          "description": "根据action不同，需要提供不同的参数",
          "required": "依赖于action"
        }
      },
      "return_value": {
        "type": "dict",
        "description": "包含查询结果或错误信息的字典"
      }
    },
    "usage_examples": [
      {
        "description": "通过节目名称搜索",
        "code": "tv_show_api(action=\"search_by_name\", name=\"新闻联播\", limit=5, sort_by=\"relevance\")"
      },
      {
        "description": "通过节目类型搜索",
        "code": "tv_show_api(action=\"search_by_type\", type_name=\"综艺\", limit=5, sort_by=\"time\")"
      },
      {
        "description": "获取节目详情",
        "code": "tv_show_api(action=\"get_show_details\", show_id=\"show1\")"
      },
      {
        "description": "获取可用节目类型",
        "code": "tv_show_api(action=\"get_available_types\")"
      }
    ],
    "implementation_notes": [
      "使用内存缓存减少重复API调用",
      "实现了错误处理和异常捕获",
      "提供了灵活的搜索和排序选项",
      "使用模拟数据作为示例，实际应用中应替换为真实API调用"
    ],
    "dependencies": [
      "requests>=2.28.0",
      "python-dateutil>=2.8.2"
    ],
    "limitations": [
      "当前使用模拟数据，数据量有限",
      "缓存仅在内存中，重启后会丢失",
      "搜索算法相对简单，可以进一步优化"
    ],
    "future_improvements": [
      "集成真实的电视节目数据API",
      "实现持久化缓存",
      "增强搜索算法，提高相关性",
      "添加更多筛选选项（如时间段、频道等）"
    ]
  },
  "implementation_code": "import json\nimport time\nimport hashlib\nimport requests\nfrom typing import Dict, List, Optional, Union, Any\n\nclass TVShowAPI:\n    \"\"\"\n    电视节目搜索API工具，用于查询电视节目信息\n    \n    这个工具提供以下功能：\n    - 通过节目名称搜索电视节目\n    - 通过节目类型/类别搜索电视节目\n    - 获取电视节目详细信息\n    - 支持结果排序（相关性、播出时间）\n    \n    由于这是一个示例工具，它使用模拟数据和公开API的组合。\n    \"\"\"\n    \n    def __init__(self):\n        # 模拟数据库 - 在实际应用中，这会是一个外部API调用\n        self._tv_shows_db = self._initialize_mock_data()\n        # 简单的内存缓存\n        self._cache = {}\n        # 缓存过期时间（秒）\n        self._cache_ttl = 300  # 5分钟\n    \n    def _initialize_mock_data(self) -> List[Dict[str, Any]]:\n        \"\"\"初始化模拟电视节目数据\"\"\"\n        return [\n            {\n                \"id\": \"show1\",\n                \"name\": \"新闻联播\",\n                \"type\": \"新闻\",\n                \"channels\": [\"CCTV-1\", \"CCTV新闻\"],\n                \"schedule\": [\n                    {\"time\": \"19:00\", \"day\": \"每天\", \"channel\": \"CCTV-1\"},\n                    {\"time\": \"21:00\", \"day\": \"每天\", \"channel\": \"CCTV新闻\"}\n                ],\n                \"description\": \"中国中央电视台的旗舰新闻节目，报道国内外重要新闻事件。\",\n                \"cast\": [\"康辉\", \"欧阳夏丹\"],\n                \"seasons\": None,\n                \"episodes\": None\n            },\n            {\n                \"id\": \"show2\",\n                \"name\": \"天天向上\",\n                \"type\": \"综艺\",\n                \"channels\": [\"湖南卫视\"],\n                \"schedule\": [\n                    {\"time\": \"20:00\", \"day\": \"周日\", \"channel\": \"湖南卫视\"}\n                ],\n                \"description\": \"一档以年轻人的生活方式为中心的文化类脱口秀节目。\",\n                \"cast\": [\"汪涵\", \"钱枫\", \"大张伟\"],\n                \"seasons\": 15,\n                \"episodes\": None\n            },\n            {\n                \"id\": \"show3\",\n                \"name\": \"奔跑吧\",\n                \"type\": \"综艺\",\n                \"channels\": [\"浙江卫视\"],\n                \"schedule\": [\n                    {\"time\": \"20:30\", \"day\": \"周五\", \"channel\": \"浙江卫视\"}\n                ],\n                \"description\": \"中国版的《Running Man》，明星们在各种场景中完成任务和游戏。\",\n                \"cast\": [\"李晨\", \"Angelababy\", \"郑恺\"],\n                \"seasons\": 10,\n                \"episodes\": None\n            },\n            {\n                \"id\": \"show4\",\n                \"name\": \"鬼吹灯之黄皮子坟\",\n                \"type\": \"剧集\",\n                \"channels\": [\"爱奇艺\", \"腾讯视频\"],\n                \"schedule\": [\n                    {\"time\": \"全天\", \"day\": \"点播\", \"channel\": \"爱奇艺\"},\n                    {\"time\": \"全天\", \"day\": \"点播\", \"channel\": \"腾讯视频\"}\n                ],\n                \"description\": \"根据天下霸唱小说改编的悬疑探险剧，讲述胡八一和王胖子的探险故事。\",\n                \"cast\": [\"阮经天\", \"徐璐\", \"郑嘉颖\"],\n                \"seasons\": 1,\n                \"episodes\": 21\n            },\n            {\n                \"id\": \"show5\",\n                \"name\": \"中国诗词大会\",\n                \"type\": \"文化\",\n                \"channels\": [\"CCTV-10\"],\n                \"schedule\": [\n                    {\"time\": \"21:00\", \"day\": \"周五\", \"channel\": \"CCTV-10\"}\n                ],\n                \"description\": \"一档关于中国古诗词的知识竞赛节目，旨在传承中国传统文化。\",\n                \"cast\": [\"董卿\"],\n                \"seasons\": 6,\n                \"episodes\": None\n            },\n            {\n                \"id\": \"show6\",\n                \"name\": \"金星秀\",\n                \"type\": \"脱口秀\",\n                \"channels\": [\"东方卫视\"],\n                \"schedule\": [\n                    {\"time\": \"22:00\", \"day\": \"周三\", \"channel\": \"东方卫视\"}\n                ],\n                \"description\": \"金星主持的脱口秀节目，以犀利的评论和独特的视角探讨社会话题。\",\n                \"cast\": [\"金星\"],\n                \"seasons\": 5,\n                \"episodes\": None\n            },\n            {\n                \"id\": \"show7\",\n                \"name\": \"大国工匠\",\n                \"type\": \"纪录片\",\n                \"channels\": [\"CCTV-2\"],\n                \"schedule\": [\n                    {\"time\": \"20:30\", \"day\": \"周四\", \"channel\": \"CCTV-2\"}\n                ],\n                \"description\": \"展现中国各行各业顶尖技术工人的纪录片，讲述他们的工匠精神和技艺传承。\",\n                \"cast\": [],\n                \"seasons\": 3,\n                \"episodes\": None\n            },\n            {\n                \"id\": \"show8\",\n                \"name\": \"王牌对王牌\",\n                \"type\": \"综艺\",\n                \"channels\": [\"浙江卫视\"],\n                \"schedule\": [\n                    {\"time\": \"20:30\", \"day\": \"周五\", \"channel\": \"浙江卫视\"}\n                ],\n                \"description\": \"一档以游戏为主的明星竞技类综艺节目。\",\n                \"cast\": [\"沈腾\", \"贾玲\", \"华晨宇\"],\n                \"seasons\": 8,\n                \"episodes\": None\n            },\n            {\n                \"id\": \"show9\",\n                \"name\": \"经典咏流传\",\n                \"type\": \"文化\",\n                \"channels\": [\"CCTV-1\"],\n                \"schedule\": [\n                    {\"time\": \"21:00\", \"day\": \"周日\", \"channel\": \"CCTV-1\"}\n                ],\n                \"description\": \"一档将古诗词与现代音乐结合的文化类节目。\",\n                \"cast\": [\"撒贝宁\"],\n                \"seasons\": 4,\n                \"episodes\": None\n            },\n            {\n                \"id\": \"show10\",\n                \"name\": \"向往的生活\",\n                \"type\": \"真人秀\",\n                \"channels\": [\"湖南卫视\"],\n                \"schedule\": [\n                    {\"time\": \"20:30\", \"day\": \"周六\", \"channel\": \"湖南卫视\"}\n                ],\n                \"description\": \"明星嘉宾在乡村生活，体验田园生活的慢综艺节目。\",\n                \"cast\": [\"黄磊\", \"何炅\", \"张艺兴\"],\n                \"seasons\": 7,\n                \"episodes\": None\n            }\n        ]\n    \n    def _get_cache_key(self, method: str, **params) -> str:\n        \"\"\"生成缓存键\"\"\"\n        param_str = json.dumps(params, sort_keys=True)\n        return hashlib.md5(f\"{method}:{param_str}\".encode()).hexdigest()\n    \n    def _get_from_cache(self, cache_key: str) -> Optional[Dict]:\n        \"\"\"从缓存获取数据\"\"\"\n        if cache_key in self._cache:\n            cached_data = self._cache[cache_key]\n            if time.time() - cached_data[\"timestamp\"] < self._cache_ttl:\n                return cached_data[\"data\"]\n            else:\n                # 缓存过期，删除\n                del self._cache[cache_key]\n        return None\n    \n    def _save_to_cache(self, cache_key: str, data: Dict) -> None:\n        \"\"\"保存数据到缓存\"\"\"\n        self._cache[cache_key] = {\n            \"data\": data,\n            \"timestamp\": time.time()\n        }\n    \n    def _calculate_relevance(self, show: Dict, query: str) -> float:\n        \"\"\"计算节目与查询的相关性分数\"\"\"\n        relevance = 0.0\n        query = query.lower()\n        \n        # 名称匹配权重最高\n        if query in show[\"name\"].lower():\n            name_position = show[\"name\"].lower().find(query)\n            # 如果是前缀匹配，给予更高的分数\n            if name_position == 0:\n                relevance += 10.0\n            else:\n                relevance += 8.0\n        \n        # 类型匹配\n        if query in show[\"type\"].lower():\n            relevance += 5.0\n        \n        # 描述匹配\n        if query in show[\"description\"].lower():\n            relevance += 3.0\n        \n        # 演员匹配\n        for cast_member in show[\"cast\"]:\n            if query in cast_member.lower():\n                relevance += 4.0\n                break\n        \n        return relevance\n    \n    def search_by_name(self, name: str, limit: int = 10, sort_by: str = \"relevance\") -> Dict[str, Any]:\n        \"\"\"\n        通过节目名称搜索电视节目\n        \n        Args:\n            name: 节目名称或关键词\n            limit: 返回结果数量限制\n            sort_by: 排序方式，可选值：relevance（相关性）, time（播出时间）\n            \n        Returns:\n            包含搜索结果的字典\n        \"\"\"\n        if not name:\n            return {\"error\": \"节目名称不能为空\", \"results\": [], \"total\": 0}\n        \n        # 尝试从缓存获取\n        cache_key = self._get_cache_key(\"search_by_name\", name=name, limit=limit, sort_by=sort_by)\n        cached_result = self._get_from_cache(cache_key)\n        if cached_result:\n            return cached_result\n        \n        try:\n            # 在实际应用中，这里会是一个API调用\n            # 模拟API调用延迟\n            time.sleep(0.5)\n            \n            results = []\n            for show in self._tv_shows_db:\n                relevance = self._calculate_relevance(show, name)\n                if relevance > 0:\n                    # 创建简要信息对象\n                    summary = {\n                        \"id\": show[\"id\"],\n                        \"name\": show[\"name\"],\n                        \"type\": show[\"type\"],\n                        \"channel\": show[\"channels\"][0] if show[\"channels\"] else \"未知\",\n                        \"next_time\": show[\"schedule\"][0] if show[\"schedule\"] else {\"time\": \"未知\", \"day\": \"未知\", \"channel\": \"未知\"},\n                        \"relevance\": relevance\n                    }\n                    results.append(summary)\n            \n            # 排序\n            if sort_by == \"relevance\":\n                results.sort(key=lambda x: x[\"relevance\"], reverse=True)\n            elif sort_by == \"time\":\n                # 简化的时间排序，实际应用中需要更复杂的时间处理\n                # 这里假设schedule[0]是最近的播出时间\n                def time_sort_key(x):\n                    if isinstance(x[\"next_time\"], dict) and \"time\" in x[\"next_time\"]:\n                        return x[\"next_time\"][\"time\"]\n                    return \"99:99\"  # 未知时间排在最后\n                \n                results.sort(key=time_sort_key)\n            \n            # 限制结果数量\n            results = results[:limit]\n            \n            response = {\n                \"results\": results,\n                \"total\": len(results),\n                \"query\": name,\n                \"sort_by\": sort_by\n            }\n            \n            # 保存到缓存\n            self._save_to_cache(cache_key, response)\n            \n            return response\n            \n        except Exception as e:\n            return {\"error\": f\"搜索失败: {str(e)}\", \"results\": [], \"total\": 0}\n    \n    def search_by_type(self, type_name: str, limit: int = 10, sort_by: str = \"relevance\") -> Dict[str, Any]:\n        \"\"\"\n        通过节目类型搜索电视节目\n        \n        Args:\n            type_name: 节目类型\n            limit: 返回结果数量限制\n            sort_by: 排序方式，可选值：relevance（相关性）, time（播出时间）\n            \n        Returns:\n            包含搜索结果的字典\n        \"\"\"\n        if not type_name:\n            return {\"error\": \"节目类型不能为空\", \"results\": [], \"total\": 0}\n        \n        # 尝试从缓存获取\n        cache_key = self._get_cache_key(\"search_by_type\", type_name=type_name, limit=limit, sort_by=sort_by)\n        cached_result = self._get_from_cache(cache_key)\n        if cached_result:\n            return cached_result\n        \n        try:\n            # 模拟API调用延迟\n            time.sleep(0.5)\n            \n            results = []\n            for show in self._tv_shows_db:\n                if type_name.lower() in show[\"type\"].lower():\n                    # 创建简要信息对象\n                    summary = {\n                        \"id\": show[\"id\"],\n                        \"name\": show[\"name\"],\n                        \"type\": show[\"type\"],\n                        \"channel\": show[\"channels\"][0] if show[\"channels\"] else \"未知\",\n                        \"next_time\": show[\"schedule\"][0] if show[\"schedule\"] else {\"time\": \"未知\", \"day\": \"未知\", \"channel\": \"未知\"}\n                    }\n                    results.append(summary)\n            \n            # 排序\n            if sort_by == \"relevance\":\n                # 对于类型搜索，相关性排序可以基于名称字母顺序\n                results.sort(key=lambda x: x[\"name\"])\n            elif sort_by == \"time\":\n                def time_sort_key(x):\n                    if isinstance(x[\"next_time\"], dict) and \"time\" in x[\"next_time\"]:\n                        return x[\"next_time\"][\"time\"]\n                    return \"99:99\"  # 未知时间排在最后\n                \n                results.sort(key=time_sort_key)\n            \n            # 限制结果数量\n            results = results[:limit]\n            \n            response = {\n                \"results\": results,\n                \"total\": len(results),\n                \"query\": type_name,\n                \"sort_by\": sort_by\n            }\n            \n            # 保存到缓存\n            self._save_to_cache(cache_key, response)\n            \n            return response\n            \n        except Exception as e:\n            return {\"error\": f\"搜索失败: {str(e)}\", \"results\": [], \"total\": 0}\n    \n    def get_show_details(self, show_id: str = None, show_name: str = None) -> Dict[str, Any]:\n        \"\"\"\n        获取电视节目详细信息\n        \n        Args:\n            show_id: 节目ID\n            show_name: 节目名称（当ID不可用时使用）\n            \n        Returns:\n            包含节目详细信息的字典\n        \"\"\"\n        if not show_id and not show_name:\n            return {\"error\": \"必须提供节目ID或节目名称\", \"show\": None}\n        \n        # 尝试从缓存获取\n        cache_key = self._get_cache_key(\"get_show_details\", show_id=show_id, show_name=show_name)\n        cached_result = self._get_from_cache(cache_key)\n        if cached_result:\n            return cached_result\n        \n        try:\n            # 模拟API调用延迟\n            time.sleep(0.5)\n            \n            # 查找节目\n            found_show = None\n            \n            if show_id:\n                for show in self._tv_shows_db:\n                    if show[\"id\"] == show_id:\n                        found_show = show\n                        break\n            \n            if not found_show and show_name:\n                for show in self._tv_shows_db:\n                    if show_name.lower() in show[\"name\"].lower():\n                        found_show = show\n                        break\n            \n            if not found_show:\n                return {\"error\": \"未找到指定的电视节目\", \"show\": None}\n            \n            # 创建详细信息对象\n            details = {\n                \"id\": found_show[\"id\"],\n                \"name\": found_show[\"name\"],\n                \"type\": found_show[\"type\"],\n                \"channels\": found_show[\"channels\"],\n                \"schedule\": found_show[\"schedule\"],\n                \"description\": found_show[\"description\"],\n                \"cast\": found_show[\"cast\"],\n                \"seasons\": found_show[\"seasons\"],\n                \"episodes\": found_show[\"episodes\"]\n            }\n            \n            response = {\n                \"show\": details,\n                \"success\": True\n            }\n            \n            # 保存到缓存\n            self._save_to_cache(cache_key, response)\n            \n            return response\n            \n        except Exception as e:\n            return {\"error\": f\"获取详情失败: {str(e)}\", \"show\": None}\n    \n    def get_available_types(self) -> Dict[str, Any]:\n        \"\"\"\n        获取所有可用的节目类型\n        \n        Returns:\n            包含所有节目类型的字典\n        \"\"\"\n        # 尝试从缓存获取\n        cache_key = self._get_cache_key(\"get_available_types\")\n        cached_result = self._get_from_cache(cache_key)\n        if cached_result:\n            return cached_result\n        \n        try:\n            # 模拟API调用延迟\n            time.sleep(0.3)\n            \n            # 提取所有唯一的节目类型\n            types = set()\n            for show in self._tv_shows_db:\n                types.add(show[\"type\"])\n            \n            response = {\n                \"types\": sorted(list(types)),\n                \"total\": len(types),\n                \"success\": True\n            }\n            \n            # 保存到缓存\n            self._save_to_cache(cache_key, response)\n            \n            return response\n            \n        except Exception as e:\n            return {\"error\": f\"获取类型失败: {str(e)}\", \"types\": [], \"total\": 0}\n    \n    def clear_cache(self) -> Dict[str, Any]:\n        \"\"\"\n        清除缓存\n        \n        Returns:\n            操作结果\n        \"\"\"\n        try:\n            cache_size = len(self._cache)\n            self._cache = {}\n            return {\"success\": True, \"message\": f\"已清除{cache_size}条缓存记录\"}\n        except Exception as e:\n            return {\"error\": f\"清除缓存失败: {str(e)}\"}\n\n# 包装为工具函数\ndef tv_show_api(action: str, **kwargs) -> Dict[str, Any]:\n    \"\"\"\n    电视节目搜索API工具，用于查询电视节目信息\n    \n    Args:\n        action: 操作类型，可选值：\n            - search_by_name: 通过节目名称搜索\n            - search_by_type: 通过节目类型搜索\n            - get_show_details: 获取节目详情\n            - get_available_types: 获取所有可用的节目类型\n            - clear_cache: 清除缓存\n        **kwargs: 根据action不同，需要提供不同的参数\n            - search_by_name: name, limit(可选), sort_by(可选)\n            - search_by_type: type_name, limit(可选), sort_by(可选)\n            - get_show_details: show_id或show_name\n            - get_available_types: 无需额外参数\n            - clear_cache: 无需额外参数\n    \n    Returns:\n        Dict[str, Any]: 包含查询结果的字典\n    \"\"\"\n    # 创建API实例（实际应用中可以使用单例模式）\n    api = TVShowAPI()\n    \n    # 根据action调用相应的方法\n    if action == \"search_by_name\":\n        return api.search_by_name(**kwargs)\n    elif action == \"search_by_type\":\n        return api.search_by_type(**kwargs)\n    elif action == \"get_show_details\":\n        return api.get_show_details(**kwargs)\n    elif action == \"get_available_types\":\n        return api.get_available_types()\n    elif action == \"clear_cache\":\n        return api.clear_cache()\n    else:\n        return {\"error\": f\"不支持的操作: {action}\", \"supported_actions\": [\n            \"search_by_name\", \"search_by_type\", \"get_show_details\", \n            \"get_available_types\", \"clear_cache\"\n        ]}"
}